// <auto-generated />
using System;
using HotMeals.Data.School;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotMeals.Data.Migrations
{
    [DbContext(typeof(SchoolContext))]
    partial class SchoolContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AllergenPresence", b =>
                {
                    b.Property<int>("AllergenId")
                        .HasColumnType("int(11)")
                        .HasColumnName("allergen_id");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ingredient_id");

                    b.HasKey("AllergenId", "IngredientId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IngredientId" }, "fk__allergen_presences__ingredient_id");

                    b.ToTable("allergen_presences", (string)null);
                });

            modelBuilder.Entity("AllergenSensitivity", b =>
                {
                    b.Property<int>("ChildId")
                        .HasColumnType("int(11)")
                        .HasColumnName("child_id");

                    b.Property<int>("AllergenId")
                        .HasColumnType("int(11)")
                        .HasColumnName("allergen_id");

                    b.HasKey("ChildId", "AllergenId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AllergenId" }, "fk__allergen_sensitivities__allergen_id");

                    b.ToTable("allergen_sensitivities", (string)null);
                });

            modelBuilder.Entity("HotMeals.Data.School.Allergen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("allergens", (string)null);
                });

            modelBuilder.Entity("HotMeals.Data.School.Child", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.Property<int>("ClassId")
                        .HasColumnType("int(11)")
                        .HasColumnName("class_id");

                    b.Property<string>("FoodPreference")
                        .IsRequired()
                        .HasColumnType("enum('meat','veggie','vegan')")
                        .HasColumnName("food_preference");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClassId" }, "fk__children__class_id");

                    b.ToTable("children", (string)null);
                });

            modelBuilder.Entity("HotMeals.Data.School.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("classes", (string)null);
                });

            modelBuilder.Entity("HotMeals.Data.School.HotMeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Recipe")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("recipe");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("hot_meals", (string)null);
                });

            modelBuilder.Entity("HotMeals.Data.School.HotMealChoice", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("MealChoiceChildId")
                        .HasColumnType("int(11)")
                        .HasColumnName("meal_choice_child_id");

                    b.Property<int>("HotMealId")
                        .HasColumnType("int(11)")
                        .HasColumnName("hot_meal_id");

                    b.HasKey("Date", "MealChoiceChildId", "HotMealId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HotMealId" }, "fk__hot_meal_choices__hot_meal_id");

                    b.HasIndex(new[] { "Date", "HotMealId" }, "fk__hot_meal_choices__scheduled_hot_meal_composite");

                    b.ToTable("hot_meal_choices", (string)null);
                });

            modelBuilder.Entity("HotMeals.Data.School.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("enum('meat','veggie','vegan')")
                        .HasColumnName("type");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("enum('kg','l','')")
                        .HasColumnName("unit_of_measurement");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("ingredients", (string)null);
                });

            modelBuilder.Entity("HotMeals.Data.School.MealChoice", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("ChildId")
                        .HasColumnType("int(11)")
                        .HasColumnName("child_id");

                    b.Property<string>("Choice")
                        .IsRequired()
                        .HasColumnType("enum('home','cold','hot')")
                        .HasColumnName("choice");

                    b.HasKey("Date", "ChildId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ChildId" }, "fk__meal_choices__child_id");

                    b.ToTable("meal_choices", (string)null);
                });

            modelBuilder.Entity("HotMeals.Data.School.MealIngredient", b =>
                {
                    b.Property<int>("HotMealId")
                        .HasColumnType("int(11)")
                        .HasColumnName("hot_meal_id");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ingredient_id");

                    b.Property<float>("Quantity")
                        .HasColumnType("float")
                        .HasColumnName("quantity");

                    b.HasKey("HotMealId", "IngredientId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IngredientId" }, "fk__meal_ingredients__ingredient_id");

                    b.ToTable("meal_ingredients", (string)null);
                });

            modelBuilder.Entity("HotMeals.Data.School.Parent", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.ToTable("parents", (string)null);
                });

            modelBuilder.Entity("HotMeals.Data.School.ScheduledHotMeal", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("HotMealId")
                        .HasColumnType("int(11)")
                        .HasColumnName("hot_meal_id");

                    b.HasKey("Date", "HotMealId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HotMealId" }, "fk__scheduled_hot_meals__hot_meal_id");

                    b.ToTable("scheduled_hot_meals", (string)null);
                });

            modelBuilder.Entity("HotMeals.Data.School.SchoolUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HotMeals.Data.School.Staff", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("enum('kitchen','teaching','management')")
                        .HasColumnName("role");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.ToTable("staff", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ParentalRelation", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("parent_id");

                    b.Property<int>("ChildId")
                        .HasColumnType("int(11)")
                        .HasColumnName("child_id");

                    b.HasKey("ParentId", "ChildId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ChildId" }, "fk__parental_relations__child_id");

                    b.ToTable("parental_relations", (string)null);
                });

            modelBuilder.Entity("Teacher", b =>
                {
                    b.Property<int>("StaffId")
                        .HasColumnType("int(11)")
                        .HasColumnName("staff_id");

                    b.Property<int>("ClassId")
                        .HasColumnType("int(11)")
                        .HasColumnName("class_id");

                    b.HasKey("StaffId", "ClassId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClassId" }, "fk__teachers__class_id");

                    b.ToTable("teachers", (string)null);
                });

            modelBuilder.Entity("AllergenPresence", b =>
                {
                    b.HasOne("HotMeals.Data.School.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__allergen_presences__allergen_id");

                    b.HasOne("HotMeals.Data.School.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__allergen_presences__ingredient_id");
                });

            modelBuilder.Entity("AllergenSensitivity", b =>
                {
                    b.HasOne("HotMeals.Data.School.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__allergen_sensitivities__allergen_id");

                    b.HasOne("HotMeals.Data.School.Child", null)
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__allergen_sensitivities__child_id");
                });

            modelBuilder.Entity("HotMeals.Data.School.Child", b =>
                {
                    b.HasOne("HotMeals.Data.School.Class", "Class")
                        .WithMany("Children")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__children__class_id");

                    b.HasOne("HotMeals.Data.School.SchoolUser", "User")
                        .WithOne("Child")
                        .HasForeignKey("HotMeals.Data.School.Child", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__children__user_id");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotMeals.Data.School.HotMealChoice", b =>
                {
                    b.HasOne("HotMeals.Data.School.ScheduledHotMeal", "ScheduledHotMeal")
                        .WithMany("HotMealChoices")
                        .HasForeignKey("Date", "HotMealId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__hot_meal_choices__scheduled_hot_meal_composite");

                    b.HasOne("HotMeals.Data.School.MealChoice", "MealChoice")
                        .WithMany("HotMealChoices")
                        .HasForeignKey("Date", "MealChoiceChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__hot_meal_choices__meal_choice_composite");

                    b.Navigation("MealChoice");

                    b.Navigation("ScheduledHotMeal");
                });

            modelBuilder.Entity("HotMeals.Data.School.MealChoice", b =>
                {
                    b.HasOne("HotMeals.Data.School.Child", "Child")
                        .WithMany("MealChoices")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__meal_choices__child_id");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("HotMeals.Data.School.MealIngredient", b =>
                {
                    b.HasOne("HotMeals.Data.School.HotMeal", "HotMeal")
                        .WithMany("MealIngredients")
                        .HasForeignKey("HotMealId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__meal_ingredients__hot_meal_id");

                    b.HasOne("HotMeals.Data.School.Ingredient", "Ingredient")
                        .WithMany("MealIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__meal_ingredients__ingredient_id");

                    b.Navigation("HotMeal");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("HotMeals.Data.School.Parent", b =>
                {
                    b.HasOne("HotMeals.Data.School.SchoolUser", "User")
                        .WithOne("Parent")
                        .HasForeignKey("HotMeals.Data.School.Parent", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__parents__user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotMeals.Data.School.ScheduledHotMeal", b =>
                {
                    b.HasOne("HotMeals.Data.School.HotMeal", "HotMeal")
                        .WithMany("ScheduledHotMeals")
                        .HasForeignKey("HotMealId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__scheduled_hot_meals__hot_meal_id");

                    b.Navigation("HotMeal");
                });

            modelBuilder.Entity("HotMeals.Data.School.Staff", b =>
                {
                    b.HasOne("HotMeals.Data.School.SchoolUser", "User")
                        .WithOne("Staff")
                        .HasForeignKey("HotMeals.Data.School.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__staff__user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HotMeals.Data.School.SchoolUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HotMeals.Data.School.SchoolUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotMeals.Data.School.SchoolUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HotMeals.Data.School.SchoolUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParentalRelation", b =>
                {
                    b.HasOne("HotMeals.Data.School.Child", null)
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__parental_relations__child_id");

                    b.HasOne("HotMeals.Data.School.Parent", null)
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__parental_relations__parent_id");
                });

            modelBuilder.Entity("Teacher", b =>
                {
                    b.HasOne("HotMeals.Data.School.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__teachers__class_id");

                    b.HasOne("HotMeals.Data.School.Staff", null)
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk__teachers__staff_id");
                });

            modelBuilder.Entity("HotMeals.Data.School.Child", b =>
                {
                    b.Navigation("MealChoices");
                });

            modelBuilder.Entity("HotMeals.Data.School.Class", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("HotMeals.Data.School.HotMeal", b =>
                {
                    b.Navigation("MealIngredients");

                    b.Navigation("ScheduledHotMeals");
                });

            modelBuilder.Entity("HotMeals.Data.School.Ingredient", b =>
                {
                    b.Navigation("MealIngredients");
                });

            modelBuilder.Entity("HotMeals.Data.School.MealChoice", b =>
                {
                    b.Navigation("HotMealChoices");
                });

            modelBuilder.Entity("HotMeals.Data.School.ScheduledHotMeal", b =>
                {
                    b.Navigation("HotMealChoices");
                });

            modelBuilder.Entity("HotMeals.Data.School.SchoolUser", b =>
                {
                    b.Navigation("Child");

                    b.Navigation("Parent");

                    b.Navigation("Staff");
                });
#pragma warning restore 612, 618
        }
    }
}
